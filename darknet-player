#!/usr/bin/env bash

# ==================== Darknet Player =====================
# Bash script to download and play Darknet Diaries episodes
# 
# Darknet Diaries created by Jack Rhysider 
# Website: https://darknetdiaries.com/
#
# Script author: Costinteo
# Github: https://github.com/Costinteo
# License: GNU GPL v3. 
# Link: https://www.gnu.org/licenses/gpl-3.0.txt
# =========================================================

# === CLI Arguments ===
KEEP=0
USAGE=0
LICENSE=0
COLOR=1
VERBOSE=0
EPISODE=0

# === Global vars ===
FILENAME_TO_PLAY=""
FOUND=0

# === Constants ===
# = Links =
ALL_EPISODES_LIST="https://darknetdiaries.com/darknet-diaries-all-episode-links.txt"
EPISODE_TITLE_PATTERN="darknet-diaries-ep%NUM%-[a-zA-Z0-9\-\_]+\.mp3"

LICENSE_LINK="https://www.gnu.org/licenses/gpl-3.0.txt"

# = Colors =
GREEN='\033[32;01m'
YELLOW='\033[33;01m'
RED='\033[1;31m'
BLUE='\033[34;01m'
PURPLE='\033[35m'
TEXT='\033[0m'


# =========================================================


usage() {
	cat <<- _end_of_usage
	Usage: darknet-player [OPTIONS]...
	Download and play Darknet Diaries episodes in the terminal.

	Options:
	    -h, --help               print this text and exit
	        --license            print license and exit
	        --no-color           suppress colored output
	    -p, --play <EP>          download & play episode <EP>
	    -k, --keep               don't remove episode after playing

	Darknet Diaries is made by Jack Rhysider. <https://darknetdiaries.com/>
	The script is written by Costinteo. <https://github.com/Costinteo>
	Licensed under GNU GPL v3. <$LICENSE_LINK>
	_end_of_usage

	cleanup
	exit 0
}

# always grabs license from the internet
license() {
	wget -q --output-document - "$LICENSE_LINK"

	[ $? != 0 ] && printf "${RED}License couldn't be fetched! Check internet connection...${TEXT}\n"

	cleanup
	exit 0
}

getArgs() {
	
	[ $# == 0 ] && usage

	while [ $# != 0 ]
	do
		case "$1" in
		"-h"|"--help")
			USAGE=1
			;;

		"--license")
			LICENSE=1
			;;

		"--no-color")
			COLOR=0
			;;
		"-p"|"--play")
			local numeric='^[0-9]+$'
			[[ ! "$2" =~ $numeric ]] && usageError "Invalid episode number!"
			EPISODE=$2
			shift
			;;
		"-k"|"--keep")
			KEEP=1
			;;
		*)
			usageError "Unkown argument!"
			;;
		esac
		shift
	done
}

checkReqs() {
	wget --version 1>/dev/null 2>&1
	[ $? != 0 ] && printf "${RED}wget is not installed...${TEXT}\n" && exit 1

	mpv --version 1>/dev/null 2>&1
	[ $? != 0 ] && printf "${RED}mpv is not installed...${TEXT}\n" && exit 1

}

suppressColors() {
	GREEN=''
	YELLOW=''
	RED=''
	BLUE=''
	PURPLE=''
	TEXT=''
}

# prints usage error message in red and exits
# used when parsing args
usageError() {

	local msg=$1
	printf "${RED}$msg${TEXT} See --help for usage.\n"
	exit 1
}

cleanup() {
	[ $KEEP == 0 ] && [ $FOUND == 0 ] && [ -n "$FILENAME_TO_PLAY" ] && rm "$FILENAME_TO_PLAY"
}

interrupt() {
	printf "\n${YELLOW}Script interrupted...${TEXT}\n"
	cleanup
	exit 1
}

# $1 = episode number
# $2 = output filename path [OPTIONAL]
downloadEpisode() {

	local ep=$1
	local episodeList=$(wget -q --output-document - $ALL_EPISODES_LIST)
	local filename=${2:-$(echo "$episodeList" | grep -oP -- "${EPISODE_TITLE_PATTERN//%NUM%/$ep}")}

	local link=$(echo "$episodeList" | grep -- "$filename")

	[ -z "$filename" ] && printf "${RED}Episode $ep doesn't exist!${TEXT}\n" && return 1

	if [ ! -f "$filename" ]; then

		printf "${YELLOW}Downloading ${PURPLE}episode $ep${YELLOW} and saving to ${PURPLE}$filename${YELLOW}...${TEXT}\n"
		wget -q --output-document "$filename" "$link"

		[ $? == 1 ] && printf "${RED}Download of episode $ep failed unexpectedly!${TEXT}\n" && return 1

		printf "${GREEN}Successfully downloaded ${PURPLE}episode $ep${GREEN} to ${PURPLE}$filename${TEXT}\n"
	else

		FOUND=1
		printf "${YELLOW}Episode already downloaded...${TEXT}\n"

	fi
	
	FILENAME_TO_PLAY=$filename
	return 0
}

# $1 = path to episode
playEpisode() {

	local path=$1

	[ -f "$path" ] && mpv --no-video "$path" && return 0

	printf "${RED}Episode not found at path: ${YELLOW}$path${TEXT}\n"
	return 1

}

# does all the magic
darknetPlayer() {
	
	[ $USAGE == 1 ] && usage
	[ $LICENSE == 1 ] && license
	[ $COLOR == 0 ] && suppressColors

	[ ! -f "$filename" ] && downloadEpisode "$EPISODE"
	[ $? == 0 ] && playEpisode "$FILENAME_TO_PLAY"
}

# =========================================================
# === MAIN ===

trap interrupt SIGINT

checkReqs
getArgs "$@"
darknetPlayer
cleanup
